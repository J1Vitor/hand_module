# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Hand
                                 A QGIS plugin
 Gera o Height Above Nearest Drainage (HAND)
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2025-09-19
        git sha              : $Format:%H$
        copyright            : (C) 2025 by João Vitor Lima & Adriano Paz
        email                : jvdsl_off@outlook.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon, QFont
from qgis.PyQt.QtWidgets import QApplication, QAction, QFileDialog, QMessageBox
from qgis.core import QgsMapLayerProxyModel, Qgis, QgsProject, QgsRasterLayer, QgsMapLayer
import qgis.utils

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .hand_module_dialog import HandDialog
import os.path
from pathlib import Path
from osgeo import ogr, gdal, gdalconst
import subprocess
from datetime import datetime


class Hand:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'Hand_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&HAND Plugin')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg_hand = HandDialog()
        self.diretorio_atual = os.path.dirname(os.path.abspath(__file__))

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('Hand', message)

    def add_action(
            self,
            icon_path,
            text,
            callback,
            enabled_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/hand_module/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'HAND Plugin'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&HAND Plugin'),
                action)
            self.iface.removeToolBarIcon(action)

    def apaga_arquivos_temp(self):
        """Esta funcao elimina os arquivos temporarios criados durante a execucao do plugin"""
        temp_path = Path(self.diretorio_atual + r'\temp')

        # Seleciona todos os arquivos exceto o executavel
        arquivos = [f for f in temp_path.iterdir() if f.is_file()
                    and f.suffix.lower() != ".exe"]

        # Apaga todos os arquivos
        for file in arquivos:
            os.remove(file)

    def carregaArquivos(self, combobox, file_type="raster"):
        """Esta funcao é utilizada para adicionar os arquivos enviados pelo usuario ao plugin"""
        # Define as variaveis e configuracoes da janela de escolha do arquivo
        file_ = None
        options = QFileDialog.Options()

        while True:  # Loop até que o usuario selecione um arquivo ou cancele

            # Janela de dialogo com o Usuario
            if file_type == "raster":
                file_, _ = QFileDialog.getOpenFileName(
                    None, "Seleciona um arquivo!", "GeoTIFF (*.tif)", options=options)
                if not file_:
                    result = "Nenhum arquivo foi selecinado."
                    reply = QMessageBox.warning(
                        self.dlg_hand, "Atenção", result, QMessageBox.Ok)
                    if reply == QMessageBox.Ok:
                        break

                # Se o raster nao estiver no projeto, adiciona
                if file_ not in [layer.source() for layer in QgsProject.instance().mapLayers().values()]:
                    layer = QgsRasterLayer(
                        file_, os.path.basename(file_), "gdal")
                    QgsProject.instance().addMapLayer(layer)

                # Adiciona o arquivo ao combo box
                combobox.setLayer(layer)

                return file_

    def save_buttons(self):
        '''Esta funcao configura os botoes da salvar (criar arquivo)'''
        # Seleciona o arquivo enviado pelo usuario
        while True:
            file_name, _ = QFileDialog.getSaveFileName(
                None, "Salve o arquivo.", '', "GeoTIFF(*.tif)")
            if file_name:
                self.dlg_hand.le_01.setText(file_name)
                break

            else:
                # O usuario nao solucionou um arquivo (um caminho para salvar o arquivo de saida)
                result = "Nenhum arquivo foi selecinado."
                reply = QMessageBox.warning(
                    self.dlg_hand, "Atenção", result, QMessageBox.Ok)
                if reply == QMessageBox.Ok:
                    break

    def cancel_log_page(self):
        '''Esta funcao configura o botao de cancelar da pagina de log'''
        mensagem_log1 = None
        self.dlg_hand.te_logg.clear()
        # Cria texto formatado para adicionar ao text edit? mensagem de aviso
        mensagem_log1 = '<font>\nATTENTION: stopping HAND process...</font>'

        # Adiciona o texto formatado no QTextEdit
        self.dlg_hand.te_logg.insertHtml(mensagem_log1)

        # Reativa a pagina de parametros
        self.dlg_hand.pg_parameters.setEnabled(True)

        # Desativa a pagina de logge
        self.dlg_hand.pg_log_hand.setEnabled(False)

        # Apaga arquivos criados
        self.apaga_arquivos_temp()

    def le_geotiff_escreve_bin(self):
        """Esta funcao realiza a leitura do arquivo .tif enviado pelo user e o converte em .rst tipo binary para leitura no fortran"""
        # Limpa pasta temp
        self.apaga_arquivos_temp()

        # Arquivos rst bin
        bacia_rst = self.diretorio_atual + r'\temp\bacia.rst'
        MDE_rst = self.diretorio_atual + r'\temp\MDE.rst'
        dir_rst = self.diretorio_atual + r'\temp\dir.rst'
        drenagem_rst = self.diretorio_atual + r'\temp\drenagem.rst'

        self.dlg_hand.progressBar.setValue(10)
        # Converte bacia
        gdal.Translate(bacia_rst, self.dlg_hand.cb_01.currentLayer(
        ).source(), format="RST")
        self.dlg_hand.progressBar.setValue(20)

        # Converte MDE
        gdal.Translate(MDE_rst, self.dlg_hand.cb_02.currentLayer(
        ).source(), format="RST")
        self.dlg_hand.progressBar.setValue(30)

        # Converte direcoes de fluxo
        gdal.Translate(dir_rst, self.dlg_hand.cb_03.currentLayer(
        ).source(), format="RST")
        self.dlg_hand.progressBar.setValue(40)

        # Converte rede de drenagem
        gdal.Translate(drenagem_rst, self.dlg_hand.cb_04.currentLayer(
        ).source(), format="RST")
        self.dlg_hand.progressBar.setValue(50)

    def run_process_hand(self):
        """Organiza a criacao dos arquivos que serao lidos pela rotina Hand em fortran. 
        Salva e adicona ao projeto atual do qgis o raster gerado"""
        # Ativiva a pagina de log e limpa as informacoes passadas no text_edit
        mensagem_log1 = None
        mensagem_log = None
        self.dlg_hand.tabWidget.setCurrentIndex(1)
        self.dlg_hand.pg_log_hand.setEnabled(True)
        self.dlg_hand.te_logg.clear()
        # Configura as informacoes do textEdit da referida pagina
        font = QFont()
        font.setPointSize(11)
        version_info = {
            "QGIS Version": '3.28.0-Firenze',
            "Qt Version": '5.15.3',
            "Python Version": '3.9.5',
            "GDAL Version": '3.8.0'}

        datatime_started = datetime.now().isoformat()
        mensagem_log1 = "The plugin was developed with:\n"
        mensagem_log1 += f"QGIS Version: {version_info['QGIS Version']}\n"
        mensagem_log1 += f"Qt Version: {version_info['Qt Version']}\n"
        mensagem_log1 += f"Python Version: {version_info['Python Version']}\n"
        mensagem_log1 += f"GDAL Version: {version_info['GDAL Version']}\n"
        mensagem_log1 += "--------------------------------------------------------\n"
        mensagem_log1 += f"Algorithm started at: {datatime_started}\n"
        mensagem_log1 += "--------------------------------------------------------\n"
        self.dlg_hand.te_logg.append(mensagem_log1)

        # Chama funcao que converte os arquivos
        self.le_geotiff_escreve_bin()

        # Chama executavel fortran
        # Chama executavel fortrar para iniciar o processamento do hand
        mensagem_log = f"Inicando processamento do HAND...\n"
        self.dlg_hand.te_logg.append(mensagem_log)
        workdir = self.diretorio_atual + r'\temp'
        hand_fortran = self.diretorio_atual + r'\temp\HAND.exe'
        hand_exe = subprocess.run([hand_fortran], cwd=workdir)

        # verifica se houve algum erro no processamento da rotina fortran
        # Caso nao, a execucao continua no python
        if hand_exe.returncode == 0:
            mensagem_log = f"HAND determinado com sucesso...\n"
            self.dlg_hand.te_logg.append(mensagem_log)
            self.dlg_hand.progressBar.setValue(75)

            hand_out = self.diretorio_atual + r'\temp\HAND.rst'

            # Converte arquivo do hand para geotiff e adiciona ao QGIS
            if os.path.isfile(hand_out) == True and self.dlg_hand.le_01.text() is not '':
                mensagem_log = f"Convertendo arquivo para GeoTIFF...\n"
                self.dlg_hand.te_logg.append(mensagem_log)
                gdal.Translate(self.dlg_hand.le_01.text(),
                               hand_out, format="GTiff")
                self.dlg_hand.progressBar.setValue(90)

                # Adiciona ao qgis o resultado
                file_ = self.dlg_hand.le_01.text()
                mensagem_log = f"Adicionando arquivo ao QGIS...\n"
                self.dlg_hand.te_logg.append(mensagem_log)
                layer = QgsRasterLayer(
                    file_, os.path.basename(file_), "gdal")
                QgsProject.instance().addMapLayer(layer)

                self.dlg_hand.progressBar.setValue(100)
                mensagem_log = "Êxito! Operação realizada com sucesso..."
                self.dlg_hand.te_logg.append(mensagem_log)

                QMessageBox.information(
                    self.dlg_hand, "Informação!", "Operação realizada com sucesso!")

            else:
                QMessageBox.warning(
                    self.dlg_hand, "Erro!", "Por favor, forneca um caminho válido para salvar o HAND.")
                self.dlg_hand.progressBar.setValue(0)

        else:
            QMessageBox.warning(
                self.dlg_hand, "Erro!", "Por favor, verifique se os arquivos enviados correspondem aos que foram solicitados.")
            self.dlg_hand.progressBar.setValue(0)

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False

        # Aplica filtro para apenas raster aos comboboxes
        self.dlg_hand.cb_01.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg_hand.cb_02.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg_hand.cb_03.setFilters(QgsMapLayerProxyModel.RasterLayer)
        self.dlg_hand.cb_04.setFilters(QgsMapLayerProxyModel.RasterLayer)

        # Configura selecoes de arquivos
        self.dlg_hand.btn_01.clicked.connect(
            lambda: self.carregaArquivos(self.dlg_hand.cb_01))
        self.dlg_hand.btn_02.clicked.connect(
            lambda: self.carregaArquivos(self.dlg_hand.cb_02))
        self.dlg_hand.btn_03.clicked.connect(
            lambda: self.carregaArquivos(self.dlg_hand.cb_03))
        self.dlg_hand.btn_04.clicked.connect(
            lambda: self.carregaArquivos(self.dlg_hand.cb_04))
        self.dlg_hand.btn_05.clicked.connect(lambda: self.save_buttons())

        # show the dialog
        self.dlg_hand.show()

        # Inicia processamento
        self.dlg_hand.btn_hand.clicked.connect(lambda: self.run_process_hand())
        self.dlg_hand.btn_cancel.clicked.connect(
            lambda: self.cancel_log_page())

        # Run the dialog event loop
        self.dlg_hand.exec_()
        self.dlg_hand.close()
        self.apaga_arquivos_temp()
        qgis.utils.reloadPlugin('hand_module')
